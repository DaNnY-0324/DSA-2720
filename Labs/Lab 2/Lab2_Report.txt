# Singly Linked List Implementation Report

## Overview
This report documents the implementation of a singly linked list data structure in Python, consisting of three Python files that work together to create a complete and efficient linked list implementation.

## Files Description

### 1. Lab2_node.py
The foundation class that defines the structure of individual nodes:
- Contains the Node class with two attributes:
  * data: Stores the node's value
  * next: References the next node in the list
- Implements a simple, focused design for maintaining list connectivity

### 2. Lab2_singly_linked_list.py
The main implementation file containing all list operations:

Basic Operations:
- Insertion at beginning, end, and specified positions
- Deletion by value
- Search functionality
- Display method for list visualization

Advanced Features:
- List reversal algorithm
- Middle element finder using single traversal
- Length tracking
- Error handling for invalid operations

### 3. Lab2_main.py
A comprehensive test script demonstrating all implemented functionality:
- Creates and initializes an empty list
- Tests all insertion methods
- Demonstrates search capabilities
- Shows list reversal
- Tests middle element finding
- Performs deletion operations
- Displays results after each operation

## Implementation Details
- Follows Python best practices and naming conventions
- Modular design for easy maintenance
- Efficient algorithms using single traversal where possible
- Robust error handling for edge cases
- Clear and consistent documentation

## Testing Instructions
1. Ensure all three files (Lab2_node.py, Lab2_singly_linked_list.py, Lab2_main.py) are in the same directory
2. Run Lab2_main.py to execute the test suite
3. Verify output shows successful:
   - List creation
   - Insertions at various positions
   - Searching operations
   - List reversal
   - Middle element finding
   - Deletion operations

## Conclusion
The implementation successfully meets all lab requirements, providing a robust and efficient singly linked list data structure with comprehensive testing. The code is well-organized, properly documented, and follows good software engineering practices.